"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const summary_1 = __importDefault(require("../../../models/summary"));
const summaryPart_1 = __importDefault(require("../../../models/summaryPart"));
const file_1 = __importDefault(require("../../../models/file"));
const insertPart_1 = __importDefault(require("../insertPart"));
describe("insertPart", () => {
    const summary = summary_1.default.createFromParts(new file_1.default(), [
        {
            articles: [
                {
                    title: "1.1",
                    path: "1.1",
                },
            ],
        },
        {
            title: "Part I",
            articles: [
                {
                    title: "2.1",
                    path: "2.1",
                    articles: [],
                },
                {
                    title: "2.2",
                    path: "2.2",
                },
            ],
        },
    ]);
    test("should insert an part at a given level", () => {
        const part = summaryPart_1.default.create({
            title: "Inserted",
        }, "meaningless.level");
        const newSummary = (0, insertPart_1.default)(summary, part, 1);
        const inserted = newSummary.getPart(1);
        expect(inserted.getTitle()).toBe("Inserted");
        expect(newSummary.getParts().count()).toBe(3);
        const otherArticle = newSummary.getByLevel("3.1");
        expect(otherArticle.getTitle()).toBe("2.1");
        expect(otherArticle.getLevel()).toBe("3.1");
    });
    test("should insert an part in last position", () => {
        const part = summaryPart_1.default.create({
            title: "Inserted",
        }, "meaningless.level");
        const newSummary = (0, insertPart_1.default)(summary, part, 2);
        const inserted = newSummary.getPart(2);
        expect(inserted.getTitle()).toBe("Inserted");
        expect(newSummary.getParts().count()).toBe(3);
    });
});
