"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const immutable_1 = __importDefault(require("immutable"));
const cheerio_1 = __importDefault(require("cheerio"));
const glossaryEntry_1 = __importDefault(require("../../../models/glossaryEntry"));
const annotateText_1 = __importDefault(require("../annotateText"));
describe("annotateText", () => {
    const entries = immutable_1.default.List([
        new glossaryEntry_1.default({ name: "Word" }),
        new glossaryEntry_1.default({ name: "Multiple Words" }),
    ]);
    test("should annotate text", () => {
        const $ = cheerio_1.default.load("<p>This is a word, and multiple words</p>");
        (0, annotateText_1.default)(entries, "GLOSSARY.md", $);
        const links = $("a");
        expect(links.length).toBe(2);
        const word = $(links.get(0));
        expect(word.attr("href")).toBe("/GLOSSARY.md#word");
        expect(word.text()).toBe("word");
        expect(word.hasClass("glossary-term")).toBeTruthy();
        const words = $(links.get(1));
        expect(words.attr("href")).toBe("/GLOSSARY.md#multiple-words");
        expect(words.text()).toBe("multiple words");
        expect(words.hasClass("glossary-term")).toBeTruthy();
    });
    test("should not annotate scripts", () => {
        const $ = cheerio_1.default.load("<script>This is a word, and multiple words</script>");
        (0, annotateText_1.default)(entries, "GLOSSARY.md", $);
        expect($("a").length).toBe(0);
    });
    test('should not annotate when has class "no-glossary"', () => {
        const $ = cheerio_1.default.load('<p class="no-glossary">This is a word, and multiple words</p>');
        (0, annotateText_1.default)(entries, "GLOSSARY.md", $);
        expect($("a").length).toBe(0);
    });
});
