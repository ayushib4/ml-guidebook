"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const plugin_1 = __importDefault(require("../plugin"));
const immutable_1 = __importDefault(require("immutable"));
describe("Plugin", () => {
    describe("createFromString", () => {
        test("must parse name", () => {
            const plugin = plugin_1.default.createFromString("hello");
            expect(plugin.getName()).toBe("hello");
            expect(plugin.getVersion()).toBe("*");
        });
        test("must parse version", () => {
            const plugin = plugin_1.default.createFromString("hello@1.0.0");
            expect(plugin.getName()).toBe("hello");
            expect(plugin.getVersion()).toBe("1.0.0");
        });
    });
    describe("getNpmId", () => {
        it("should return package's name", () => {
            const plugin = new plugin_1.default({
                name: "testplugin",
                version: "*",
                path: "test.js",
                package: immutable_1.default.fromJS({
                    name: "testplugin-name"
                }),
                content: immutable_1.default.fromJS({
                    hooks: {
                        "page:before": function (page) {
                            return page;
                        },
                        page: function (page) {
                            return page;
                        }
                    }
                })
            });
            expect(plugin.getNpmID()).toBe("testplugin-name");
        });
    });
    describe("isLoaded", () => {
        test("must return false for empty plugin", () => {
            const plugin = plugin_1.default.createFromString("hello");
            expect(plugin.isLoaded()).toBe(false);
        });
    });
});
